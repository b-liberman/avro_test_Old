buildscript {
	ext {
		springBootVersion = '2.0.0.BUILD-SNAPSHOT'
		avroPluginVersion = '0.9.1'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.commercehub.gradle.plugin:gradle-avro-plugin:${avroPluginVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.commercehub.gradle.plugin.avro"

group = 'boris.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://repo.spring.io/libs-snapshot" }	
	maven { url "http://packages.confluent.io/maven/" }	
}

sourceSets {
    main {
        java {
	        srcDirs += ['build/generated-main-avro-java']
        }
    }
}


eclipse {
    classpath {
        file.whenMerged { classpath ->
            def iterator = classpath.entries.iterator()
            while(iterator.hasNext()) {
            	def cpe = iterator.next()
            	if(cpe instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder) {
            		if(cpe.path.contains('test/java')) {
	            		cpe.setOutput('build/classes/java/test/')
	            	} else if(cpe.path.contains('main/resources')) {
	            		cpe.setOutput('build/resources/main/')
	            	} else {
	            		cpe.setOutput('build/classes/java/main/')
	            	}
            		println cpe
            	}
            }
        }
    }
}

dependencies {

	ext {
		springKafkaVersion = '2.1.3.BUILD-SNAPSHOT'
		kafkaVersion = '1.0.0'
		confluentPlatformVersion = '4.0.0'
	}

	compile (
		"org.springframework.boot:spring-boot-starter-actuator",
		"org.springframework.boot:spring-boot-starter-webflux",

		"org.springframework.kafka:spring-kafka:${springKafkaVersion}",		
		"org.apache.kafka:kafka-clients:${kafkaVersion}",
		"org.apache.kafka:kafka-streams:${kafkaVersion}",
		
		"io.confluent:kafka-avro-serializer:${confluentPlatformVersion}",
		"io.confluent:kafka-streams-avro-serde:${confluentPlatformVersion}",
		"io.confluent:kafka-json-serializer:${confluentPlatformVersion}",
		
		"log4j:log4j:1.2.17"
	)
	
	
	/* devtools does not work with avro unfortunately */
	// runtime('org.springframework.boot:spring-boot-devtools')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}
